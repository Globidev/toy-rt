export const scenes: { [name: string]: string } = {
  "cornell box": "from trt.material import matte, metallic, diffuse_color\nfrom trt.shape import sphere, rect\nfrom trt import render\n\ndef scene():\n    red = (0.9, 0.3, 0.3)\n    green = (0.3, 0.9, 0.3)\n    blue = (0.3, 0.3, 0.9)\n    white = (0.7, 0.7, 0.7)\n\n    spheres = [\n        sphere(\n            center=(150+ i * 150, 150 + i * 100, 150 + i * 100),\n            radius=80,\n            material=metallic(color),\n        )\n        for i, color in enumerate((red, green, blue))\n    ]\n\n    cornell_box = [\n        # ceiling\n        rect(x=(0, 600), z=(-1000, 600), y=600, material=matte(white)).flip_normals(),\n        # light\n        rect(x=(100, 500), z=(100, 400), y=599, material=diffuse_color((7, 7, 7))),\n        # floor\n        rect(x=(0, 600), z=(-1000, 600), y=0, material=matte(white)),\n        # left\n        rect(y=(0, 600), z=(-1000, 600), x=600, material=matte(red)).flip_normals(),\n        # right\n        rect(y=(0, 600), z=(-1000, 600), x=0, material=matte(green)),\n        # front\n        rect(x=(0, 600), y=(0, 600), z=600, material=metallic(white)).flip_normals(),\n        # back\n        rect(x=(0, 600), y=(0, 600), z=-1000, material=metallic(blue)),\n    ]\n\n    return cornell_box + spheres\n\ndef config(spx):\n    return {\n        'width': 300,\n        'height': 300,\n        'samples_per_px': spx,\n        \"camera\": {\n            'look_at': (300, 300, 0),\n            'look_from': (300, 380, -800)\n        }\n    }\n\nrender(scene(), **config(100))\n",
  "gophery nightmare": "from trt import render\nfrom trt.shape import sphere, bvh_node, hitbox\nfrom trt.material import image, metallic\n\nfrom random import seed, random as rand\n\nFERRIS_SWEAT = image(\"https://glo.bi/static/ferris_sweat.png\")\nFERRIS_UNSAFE = image(\"https://glo.bi/static/ferris_unsafe.png\")\nGOPHER_PEEK = image('https://glo.bi/static/gopher_peek.png')\nGOPHER = image('https://glo.bi/static/gopher.png')\n\ndef random_position_in_cube(size):\n    return (rand() * size, rand() * size, rand() * size)\n\ndef ground():\n    tile_size = 100\n    light_green = (0.48, 0.83, 0.53)\n\n    for dx in range(15):\n        for dz in range(40):\n            x0 = (-500 + dx * tile_size)\n            z0 = (-2000 + dz * tile_size)\n            mat = metallic(light_green) if rand() < 0.9 else FERRIS_UNSAFE\n            yield hitbox((x0, 0, z0), (x0 + tile_size, 10, z0 + tile_size), mat)\n\ndef scene():\n    seed(0xDEADBEEF)\n\n    foam_ferris = bvh_node(\n        sphere((0, 0, 0), 50, FERRIS_SWEAT)\n            .rotate_y(rand() * 180)\n            .translate(random_position_in_cube(800))\n        for _count in range(500)\n    )\n\n    foam_gopher = bvh_node(\n        sphere((0, 0, 0), 150, GOPHER)\n            .rotate_y(rand() * 100)\n            .rotate_x(-50)\n            .translate(random_position_in_cube(1200))\n        for _count in range(150)\n    )\n\n    return [\n        bvh_node(ground()),\n\n        foam_ferris.translate((200, 200, 2000)),\n        foam_gopher.translate((-1400, 800, 3000)),\n\n        # Gopher cube\n        hitbox((0, 0, 0), (4000, 5000, 5000), GOPHER_PEEK)\n            .rotate_y(-50)\n            .rotate_x(50)\n            .translate((500, 2000, 5000))\n    ]\n\ndef config(spx):\n    white_ish = (0.7, 0.8, 0.9)\n\n    return {\n        \"samples_per_px\": spx,\n        \"ambiant_color\": white_ish,\n        \"camera\": {\n            \"look_at\": (300, 600, 0),\n            \"look_from\": (400, 600, -1000),\n        }\n    }\n\nrender(scene(), **config(25))\n",
  "simple 3 spheres": "from trt import render\nfrom trt.shape import sphere\nfrom trt.material import matte, metallic\n\ndef scene():\n    red = (1, 0, 0)\n    green = (0, 1, 0)\n    blue = (0, 0, 1)\n    white = (0.7, 0.7, 0.7)\n\n    spheres = [\n        sphere(\n            center=(-50 + i * 50, 20, 0),\n            radius=20,\n            material=matte(color),\n        )\n        for i, color in enumerate((red, green, blue))\n    ]\n\n    ground = sphere(\n        center=(0, -1000, 0),\n        radius=1000,\n        material=metallic(white),\n    )\n\n    return [*spheres, ground]\n\ndef config(spx):\n    return {\n        'samples_per_px': spx,\n        'ambiant_color': (0.5, 0.7, 0.9),\n        'camera': {\n            'look_at': (0, 0, 0),\n            'look_from': (150, 100, 200),\n        }\n    }\n\nrender(scene(), **config(100))\n",
  "sphere cluster": "from trt import render\nfrom trt.shape import sphere, bvh_node\nfrom trt.material import matte, metallic, dielectric, diffuse_color\n\nfrom random import random as rand, seed, choices\n\ndef random_color():\n    return (rand() * rand(), rand() * rand(), rand() * rand())\n\ndef spheres():\n    material_choices = (\n        (lambda: matte(random_color()),                   0.5),\n        (lambda: metallic(random_color(), 0.25 * rand()), 0.4),\n        (lambda: dielectric(1.0 * rand()),                0.1)\n    )\n\n    materials = iter(choices(*zip(*material_choices), k=400))\n\n    for dx in range(-10, 10):\n        for dz in range(-10, 10):\n            center = (dx + 0.9 * rand(), 0.2, dz + 0.9 * rand())\n\n            material = next(materials)()\n\n            yield sphere(center, 0.2, material)\n\n    yield from [\n        sphere((0, 1, 0), 1, dielectric(1.5)),\n        sphere((-4, 1, 0), 1, matte((.4, .2, .1))),\n        sphere((4, 1, 0), 1, metallic((.7, .6, .5))),\n    ]\n\ndef scene():\n    seed(0xDEADBEEF)\n\n    ground = sphere((0, -1000, 0), 1000, metallic((0.5, 0.5, 0.5)))\n\n    return [bvh_node(spheres()), ground]\n\ndef config(spx):\n    return {\n        'width': 600,\n        'height': 450,\n        'samples_per_px': spx,\n        'rays_per_sample': 50,\n        'ambiant_color': (0.5, 0.7, 0.9),\n        'camera': {\n            'look_at': (0, 0, 0),\n            'look_from': (10, 2, 4),\n        },\n    }\n\nrender(scene(), **config(25))\n"
}